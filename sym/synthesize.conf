##### stoke search config file

# --out result_opt_sym.s # Path to write results to

--target bins/sort3.s # Path to the function to optimize

# --def_in "{ %rdi %rax }" # The registers that are defined on entry to the target
# --live_out "{ %rax }" # The registers that are live on exit from the target
# --def_in "{ %rdi }" # The registers that are defined on entry to the target
# --live_out "{ }" # The registers that are live on exit from the target
--def_in "{ %rbp %rsp %rdi %rsi %rdx %rcx }" # The registers that are defined on entry to the target
--live_out "{ }" # The registers that are live on exit from the target
--heap_out # The heap is live on exit

# --testcases tcs/_Z6popcntm #popcnt.tc # Path to testcase file
# --testcases popcnt_sym.tc # Path to testcase file
# --testcases test_sym.tc # Path to testcase file
# --training_set "{ 0 ... 7 }" # Testcases to use for measuring correctness during search
# --test_set "{ 8 ... 1023 }"  # Testcases to use as holdout set for checking correctness
# --training_set "{ 0 ... 511 }" # Testcases to use for measuring correctness during search
# --test_set "{ 512 ... 1023 }"  # Testcases to use as holdout set for checking correctness
--training_set "{ 0 ... 7 }" # Testcases to use for measuring correctness during search
--test_set "{ 8 ... 1023 }"  # Testcases to use as holdout set for checking correctness
# --testcases test_sym.tc # Path to testcase file
# --training_set "{ 0 ... 11 }" # Testcases to use for measuring correctness during search
# --test_set "{ 0 ... 11 }"  # Testcases to use as holdout set for checking correctness

--distance hamming # Metric for measuring error between live-outs
--misalign_penalty 1 # Penalty for results that appear in the wrong location
--reduction sum # Method for summing errors across testcases
--sig_penalty 9999 # Score to assign to rewrites that produce non-zero signals

--global_swap_mass 1 # Proposal mass
--instruction_mass 1 # Proposal mass
--local_swap_mass 1 # Proposal mass
--opcode_mass 1 # Proposal mass
--operand_mass 1 # Proposal mass
--rotate_mass 1 # Proposal mass
--opcode_width_mass 1

--beta 1 # Search annealing constant
--initial_instruction_number 5 # The maximum number of instruction allowed in a rewrite

--statistics_interval 10000 # Print statistics every 100k proposals
--timeout_iterations 1600000 # Propose 16m modifications total before giving up
--cycle_timeout 100000 # Try 1m modifications before restarting

# for synthesize (*10)
# --statistics_interval 10000 # Print statistics every 100k proposals
# --timeout_iterations 16000000 # Propose 16m modifications total before giving up
# --cycle_timeout 1000000 # Try 1m modifications before restarting
# --statistics_interval 10000 # Print statistics every 100k proposals
# --timeout_iterations 1600000000 # Propose 16m modifications total before giving up
# --cycle_timeout 10000000 # Try 1m modifications before restarting


--strategy hold_out # Verify results using a larger hold out testcase set

--cost "correctness + latency"
--postprocessing simple
# --cpu_flags "{ popcnt }"
